{"version":3,"sources":["meteor://ðŸ’»app/imports/api/links.js","meteor://ðŸ’»app/imports/api/sessions.ts","meteor://ðŸ’»app/server/methods/sessions.ts","meteor://ðŸ’»app/server/publications/sessions.ts","meteor://ðŸ’»app/server/main.js"],"names":["module","export","LinksCollection","Mongo","link","v","__reifyWaitForDeps__","Collection","__reify_async_result__","_reifyError","self","async","SessionsCollection","Meteor","check","Match","methods","sessions.insert","session","console","log","title","questions","length","Error","insertedId","insertAsync","error","message","sessions.update","sessionId","updates","String","Object","findOne","update","$set","sessions.nextQuestion","updateAsync","id","$inc","currentQuestionIndex","sessions.prevQuestion","sessions.toggleActive","newState","Boolean","_id","isActive","e","sessions.submitAnswer","questionIndex","answer","Number","Any","rawCollection","answers","push","updateOne","sessions.addParticipant","user","result","$push","participants","name","modifiedCount","sessions.removeParticipant","userId","$pull","sessions.resetAnswers","concat","publish","code","found","find","fetch","adminId","insertLink","_ref","url","createdAt","Date","startup","countAsync"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nexport const LinksCollection = new Mongo.Collection('links');\n","import { Mongo } from 'meteor/mongo';\n\nexport const SessionsCollection = new Mongo.Collection<Session>('sessions');\n","import { Meteor } from 'meteor/meteor';\nimport { check, Match } from 'meteor/check';\nimport { SessionsCollection } from '../../imports/api/sessions';\n\nMeteor.methods({\n  async 'sessions.insert'(session: Session) {\n    console.log('Inserting session:', session);\n\n    if (!session.title || session.questions.length === 0) {\n      throw new Meteor.Error(\n        'invalid-data',\n        'Title and at least one question required'\n      );\n    }\n\n    try {\n      const insertedId = await SessionsCollection.insertAsync(session);\n      console.log('Session inserted with ID:', insertedId);\n      return insertedId;\n    } catch (error: any) {\n      console.error('Error inserting session:', error);\n      throw new Meteor.Error('session-insert-failed', error.message);\n    }\n  },\n\n  'sessions.update'(sessionId: string, updates: Partial<Session>) {\n    check(sessionId, String);\n    check(updates, Object);\n\n    const session = SessionsCollection.findOne(sessionId);\n    if (!session) {\n      throw new Meteor.Error('Session not found');\n    }\n\n    return SessionsCollection.update(sessionId, { $set: updates });\n  },\n\n  async 'sessions.nextQuestion'(sessionId: string) {\n    check(sessionId, String);\n    await SessionsCollection.updateAsync(\n      { id: sessionId },\n      { $inc: { currentQuestionIndex: 1 } }\n    );\n  },\n\n  async 'sessions.prevQuestion'(sessionId: string) {\n    check(sessionId, String);\n    await SessionsCollection.updateAsync(\n      { id: sessionId },\n      { $inc: { currentQuestionIndex: -1 } }\n    );\n  },\n\n  async 'sessions.toggleActive'(sessionId: string, newState: boolean) {\n    try {\n      check(sessionId, String);\n      check(newState, Boolean);\n\n      await SessionsCollection.updateAsync(\n        { _id: sessionId },\n        { $set: { isActive: newState } }\n      );\n    } catch (e) {\n      console.error('toggle active = ', e);\n    }\n  },\n\n  async 'sessions.submitAnswer'(sessionId, questionIndex, answer) {\n    check(sessionId, String);\n    check(questionIndex, Number);\n    check(answer, Match.Any);\n\n    // Use rawCollection().findOne for async findOne\n    const session = await SessionsCollection.rawCollection().findOne({\n      id: sessionId,\n    });\n\n    if (!session) {\n      throw new Meteor.Error('not-found', 'Session not found');\n    }\n\n    // Modify the session in-memory\n    session.questions[questionIndex].answers.push(answer);\n\n    // Use rawCollection().updateOne for async update\n    await SessionsCollection.rawCollection().updateOne(\n      { id: sessionId },\n      { $set: { questions: session.questions } }\n    );\n\n    return true;\n  },\n\n  async 'sessions.addParticipant'(\n    sessionId: string,\n    user: { id: string; name: string }\n  ) {\n    check(sessionId, String);\n    check(user, Object);\n\n    // Find session by _id (Mongo document id)\n    /* const session = await SessionsCollection.rawCollection().findOne({\n      id: sessionId,\n    });\n\n    if (!session) {\n      throw new Meteor.Error('not-found', 'Session not found');\n    }\n */\n    // Check if participant already exists in the participants array\n    /* const exists = (session.participants || []).some((p) => p.id === user.id);\n    if (exists) {\n      // Participant already joined, no update needed\n      return 0;\n    }\n */\n    // Add participant with async updateOne\n    const result = await SessionsCollection.rawCollection().updateOne(\n      { id: sessionId },\n      { $push: { participants: { id: user.id, name: user.name } } }\n    );\n\n    // result.modifiedCount === 1 means update success\n    return result.modifiedCount;\n  },\n\n  async 'sessions.removeParticipant'(sessionId: string, userId: string) {\n    check(sessionId, String);\n    check(userId, String);\n\n    try {\n      const result = await SessionsCollection.rawCollection().updateOne(\n        { id: sessionId },\n        { $pull: { participants: { id: userId } } }\n      );\n    } catch (e) {\n      console.error('remove participant = ', e);\n      throw new Meteor.Error('remove-participant-failed', e.message);\n    }\n  },\n\n  async 'sessions.resetAnswers'(sessionId: string, questionIndex: number) {\n    check(sessionId, String);\n    check(questionIndex, Number);\n\n    const session = await SessionsCollection.rawCollection().findOne({\n      id: sessionId,\n    });\n    if (!session) {\n      throw new Meteor.Error('not-found', 'Session not found');\n    }\n\n    if (!session.questions || !session.questions[questionIndex]) {\n      throw new Meteor.Error('invalid-question', 'Question index invalid');\n    }\n\n    // Reset answers for that question\n    await SessionsCollection.rawCollection().updateOne(\n      { id: sessionId },\n      { $set: { [`questions.${questionIndex}.answers`]: [] } }\n    );\n\n    return true;\n  },\n});\n","import { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { SessionsCollection } from '../../imports/api/sessions';\n\nMeteor.publish('sessions.byCode', function (code: string) {\n  const found = SessionsCollection.find({ code }).fetch();\n  console.log('Publishing session with code:', code, found);\n  return SessionsCollection.find({ code });\n});\n\nMeteor.publish('sessions.byAdminId', function (adminId: string) {\n  console.log('Publishing sessions for adminId:', adminId);\n  check(adminId, String); // optional but recommended for validation\n  return SessionsCollection.find({ adminId });\n});\n","import { Meteor } from 'meteor/meteor';\nimport { LinksCollection } from '/imports/api/links';\nimport './methods/sessions';\nimport './publications/sessions';\n\nasync function insertLink({ title, url }) {\n  await LinksCollection.insertAsync({ title, url, createdAt: new Date() });\n}\n\nMeteor.startup(async () => {\n  // If the Links collection is empty, add some data.\n  if ((await LinksCollection.find().countAsync()) === 0) {\n    await insertLink({\n      title: 'Do the Tutorial',\n      url: 'https://www.meteor.com/tutorials/react/creating-an-app',\n    });\n\n    await insertLink({\n      title: 'Follow the Guide',\n      url: 'https://guide.meteor.com',\n    });\n\n    await insertLink({\n      title: 'Read the Docs',\n      url: 'https://docs.meteor.com',\n    });\n\n    await insertLink({\n      title: 'Discussions',\n      url: 'https://forums.meteor.com',\n    });\n  }\n\n  // We publish the entire Links collection to all clients.\n  // In order to be fetched in real-time to the clients\n  Meteor.publish('links', function () {\n    return LinksCollection.find();\n  });\n});\n"]}