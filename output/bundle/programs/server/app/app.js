Package["core-runtime"].queue("null",function () {/* Imports for global scope */

MongoInternals = Package.mongo.MongoInternals;
Mongo = Package.mongo.Mongo;
ReactiveVar = Package['reactive-var'].ReactiveVar;
ECMAScript = Package.ecmascript.ECMAScript;
Accounts = Package['accounts-base'].Accounts;
Meteor = Package.meteor.Meteor;
global = Package.meteor.global;
meteorEnv = Package.meteor.meteorEnv;
EmitterPromise = Package.meteor.EmitterPromise;
WebApp = Package.webapp.WebApp;
WebAppInternals = Package.webapp.WebAppInternals;
main = Package.webapp.main;
DDP = Package['ddp-client'].DDP;
DDPServer = Package['ddp-server'].DDPServer;
LaunchScreen = Package['launch-screen'].LaunchScreen;
meteorInstall = Package.modules.meteorInstall;
Promise = Package.promise.Promise;
Autoupdate = Package.autoupdate.Autoupdate;

var require = meteorInstall({"imports":{"api":{"links.js":function module(require,exports,module){

////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                            //
// imports/api/links.js                                                                       //
//                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                              //
!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {
  "use strict";
  try {
    module.export({
      LinksCollection: () => LinksCollection
    });
    let Mongo;
    module.link("meteor/mongo", {
      Mongo(v) {
        Mongo = v;
      }
    }, 0);
    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();
    const LinksCollection = new Mongo.Collection('links');
    __reify_async_result__();
  } catch (_reifyError) {
    return __reify_async_result__(_reifyError);
  }
  __reify_async_result__()
}, {
  self: this,
  async: false
});
////////////////////////////////////////////////////////////////////////////////////////////////

},"sessions.ts":function module(require,exports,module){

////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                            //
// imports/api/sessions.ts                                                                    //
//                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                              //
!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {
  "use strict";
  try {
    module.export({
      SessionsCollection: () => SessionsCollection
    });
    let Mongo;
    module.link("meteor/mongo", {
      Mongo(v) {
        Mongo = v;
      }
    }, 0);
    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();
    const SessionsCollection = new Mongo.Collection('sessions');
    __reify_async_result__();
  } catch (_reifyError) {
    return __reify_async_result__(_reifyError);
  }
  __reify_async_result__()
}, {
  self: this,
  async: false
});
////////////////////////////////////////////////////////////////////////////////////////////////

}}},"server":{"methods":{"sessions.ts":function module(require,exports,module){

////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                            //
// server/methods/sessions.ts                                                                 //
//                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                              //
!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {
  "use strict";
  try {
    let Meteor;
    module.link("meteor/meteor", {
      Meteor(v) {
        Meteor = v;
      }
    }, 0);
    let check, Match;
    module.link("meteor/check", {
      check(v) {
        check = v;
      },
      Match(v) {
        Match = v;
      }
    }, 1);
    let SessionsCollection;
    module.link("../../imports/api/sessions", {
      SessionsCollection(v) {
        SessionsCollection = v;
      }
    }, 2);
    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();
    Meteor.methods({
      async 'sessions.insert'(session) {
        console.log('Inserting session:', session);
        if (!session.title || session.questions.length === 0) {
          throw new Meteor.Error('invalid-data', 'Title and at least one question required');
        }
        try {
          const insertedId = await SessionsCollection.insertAsync(session);
          console.log('Session inserted with ID:', insertedId);
          return insertedId;
        } catch (error) {
          console.error('Error inserting session:', error);
          throw new Meteor.Error('session-insert-failed', error.message);
        }
      },
      'sessions.update'(sessionId, updates) {
        check(sessionId, String);
        check(updates, Object);
        const session = SessionsCollection.findOne(sessionId);
        if (!session) {
          throw new Meteor.Error('Session not found');
        }
        return SessionsCollection.update(sessionId, {
          $set: updates
        });
      },
      async 'sessions.nextQuestion'(sessionId) {
        check(sessionId, String);
        await SessionsCollection.updateAsync({
          id: sessionId
        }, {
          $inc: {
            currentQuestionIndex: 1
          }
        });
      },
      async 'sessions.prevQuestion'(sessionId) {
        check(sessionId, String);
        await SessionsCollection.updateAsync({
          id: sessionId
        }, {
          $inc: {
            currentQuestionIndex: -1
          }
        });
      },
      async 'sessions.toggleActive'(sessionId, newState) {
        try {
          check(sessionId, String);
          check(newState, Boolean);
          await SessionsCollection.updateAsync({
            _id: sessionId
          }, {
            $set: {
              isActive: newState
            }
          });
        } catch (e) {
          console.error('toggle active = ', e);
        }
      },
      async 'sessions.submitAnswer'(sessionId, questionIndex, answer) {
        check(sessionId, String);
        check(questionIndex, Number);
        check(answer, Match.Any);
        // Use rawCollection().findOne for async findOne
        const session = await SessionsCollection.rawCollection().findOne({
          id: sessionId
        });
        if (!session) {
          throw new Meteor.Error('not-found', 'Session not found');
        }
        // Modify the session in-memory
        session.questions[questionIndex].answers.push(answer);
        // Use rawCollection().updateOne for async update
        await SessionsCollection.rawCollection().updateOne({
          id: sessionId
        }, {
          $set: {
            questions: session.questions
          }
        });
        return true;
      },
      async 'sessions.addParticipant'(sessionId, user) {
        check(sessionId, String);
        check(user, Object);
        // Find session by _id (Mongo document id)
        /* const session = await SessionsCollection.rawCollection().findOne({
          id: sessionId,
        });
             if (!session) {
          throw new Meteor.Error('not-found', 'Session not found');
        }
        */
        // Check if participant already exists in the participants array
        /* const exists = (session.participants || []).some((p) => p.id === user.id);
        if (exists) {
          // Participant already joined, no update needed
          return 0;
        }
        */
        // Add participant with async updateOne
        const result = await SessionsCollection.rawCollection().updateOne({
          id: sessionId
        }, {
          $push: {
            participants: {
              id: user.id,
              name: user.name
            }
          }
        });
        // result.modifiedCount === 1 means update success
        return result.modifiedCount;
      },
      async 'sessions.removeParticipant'(sessionId, userId) {
        check(sessionId, String);
        check(userId, String);
        try {
          const result = await SessionsCollection.rawCollection().updateOne({
            id: sessionId
          }, {
            $pull: {
              participants: {
                id: userId
              }
            }
          });
        } catch (e) {
          console.error('remove participant = ', e);
          throw new Meteor.Error('remove-participant-failed', e.message);
        }
      },
      async 'sessions.resetAnswers'(sessionId, questionIndex) {
        check(sessionId, String);
        check(questionIndex, Number);
        const session = await SessionsCollection.rawCollection().findOne({
          id: sessionId
        });
        if (!session) {
          throw new Meteor.Error('not-found', 'Session not found');
        }
        if (!session.questions || !session.questions[questionIndex]) {
          throw new Meteor.Error('invalid-question', 'Question index invalid');
        }
        // Reset answers for that question
        await SessionsCollection.rawCollection().updateOne({
          id: sessionId
        }, {
          $set: {
            ["questions.".concat(questionIndex, ".answers")]: []
          }
        });
        return true;
      }
    });
    __reify_async_result__();
  } catch (_reifyError) {
    return __reify_async_result__(_reifyError);
  }
  __reify_async_result__()
}, {
  self: this,
  async: false
});
////////////////////////////////////////////////////////////////////////////////////////////////

}},"publications":{"sessions.ts":function module(require,exports,module){

////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                            //
// server/publications/sessions.ts                                                            //
//                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                              //
!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {
  "use strict";
  try {
    let Meteor;
    module.link("meteor/meteor", {
      Meteor(v) {
        Meteor = v;
      }
    }, 0);
    let check;
    module.link("meteor/check", {
      check(v) {
        check = v;
      }
    }, 1);
    let SessionsCollection;
    module.link("../../imports/api/sessions", {
      SessionsCollection(v) {
        SessionsCollection = v;
      }
    }, 2);
    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();
    Meteor.publish('sessions.byCode', function (code) {
      const found = SessionsCollection.find({
        code
      }).fetch();
      console.log('Publishing session with code:', code, found);
      return SessionsCollection.find({
        code
      });
    });
    Meteor.publish('sessions.byAdminId', function (adminId) {
      console.log('Publishing sessions for adminId:', adminId);
      check(adminId, String); // optional but recommended for validation
      return SessionsCollection.find({
        adminId
      });
    });
    __reify_async_result__();
  } catch (_reifyError) {
    return __reify_async_result__(_reifyError);
  }
  __reify_async_result__()
}, {
  self: this,
  async: false
});
////////////////////////////////////////////////////////////////////////////////////////////////

}},"main.js":function module(require,exports,module){

////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                            //
// server/main.js                                                                             //
//                                                                                            //
////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                              //
!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {
  "use strict";
  try {
    let Meteor;
    module.link("meteor/meteor", {
      Meteor(v) {
        Meteor = v;
      }
    }, 0);
    let LinksCollection;
    module.link("/imports/api/links", {
      LinksCollection(v) {
        LinksCollection = v;
      }
    }, 1);
    module.link("./methods/sessions");
    module.link("./publications/sessions");
    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();
    async function insertLink(_ref) {
      let {
        title,
        url
      } = _ref;
      await LinksCollection.insertAsync({
        title,
        url,
        createdAt: new Date()
      });
    }
    Meteor.startup(async () => {
      // If the Links collection is empty, add some data.
      if ((await LinksCollection.find().countAsync()) === 0) {
        await insertLink({
          title: 'Do the Tutorial',
          url: 'https://www.meteor.com/tutorials/react/creating-an-app'
        });
        await insertLink({
          title: 'Follow the Guide',
          url: 'https://guide.meteor.com'
        });
        await insertLink({
          title: 'Read the Docs',
          url: 'https://docs.meteor.com'
        });
        await insertLink({
          title: 'Discussions',
          url: 'https://forums.meteor.com'
        });
      }

      // We publish the entire Links collection to all clients.
      // In order to be fetched in real-time to the clients
      Meteor.publish('links', function () {
        return LinksCollection.find();
      });
    });
    __reify_async_result__();
  } catch (_reifyError) {
    return __reify_async_result__(_reifyError);
  }
  __reify_async_result__()
}, {
  self: this,
  async: false
});
////////////////////////////////////////////////////////////////////////////////////////////////

}}},{
  "extensions": [
    ".js",
    ".json",
    ".ts",
    ".mjs",
    ".tsx"
  ]
});


/* Exports */
return {
  require: require,
  eagerModulePaths: [
    "/server/main.js"
  ]
}});

//# sourceURL=meteor://💻app/app/app.js
//# sourceMappingURL=data:application/json;charset=utf8;base64,
